generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  reservation   reservation[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model car {
  plate_id          String        @id @db.VarChar(8)
  model             String        @db.VarChar(32)
  make              String        @db.VarChar(32)
  year              Int           @db.Year
  price_per_day     Decimal       @db.Decimal(10, 2)
  registration_date DateTime?     @default(now()) @db.DateTime(0)
  office_id         Int
  office            office        @relation(fields: [office_id], references: [office_id], onDelete: Cascade, onUpdate: NoAction, map: "car_office_fk")
  car_photos        car_photos[]
  car_status        car_status[]
  reservation       reservation[]

  @@index([office_id], map: "car_office_fk")
}

model car_photos {
  plate_id  String @db.VarChar(8)
  photo_url String @db.VarChar(512)
  car       car    @relation(fields: [plate_id], references: [plate_id], onDelete: Cascade, onUpdate: NoAction, map: "car_photos_fk")

  @@id([plate_id, photo_url])
}

model car_status {
  plate_id    String   @db.VarChar(8)
  status_code Int      @default(0) @db.TinyInt
  status_date DateTime @default(now()) @db.DateTime(0)
  car         car      @relation(fields: [plate_id], references: [plate_id], onDelete: Cascade, onUpdate: NoAction, map: "car_status_fk")

  @@id([plate_id, status_code, status_date])
}

model office {
  office_id   Int    @id @default(autoincrement())
  name        String @db.VarChar(32)
  email       String @unique(map: "email") @db.VarChar(64)
  phone_no    String @unique(map: "phone_no") @db.Char(11)
  country     String @db.VarChar(64)
  city        String @db.VarChar(64)
  building_no String @db.VarChar(16)
  car         car[]
}

model reservation {
  reservation_no Int       @id @default(autoincrement())
  user_id        String
  plate_id       String    @db.VarChar(8)
  reserve_date   DateTime? @default(now()) @db.DateTime(0)
  pickup_date    DateTime  @db.DateTime(0)
  return_date    DateTime  @db.DateTime(0)
  payment_date   DateTime? @db.DateTime(0)
  total_price    Decimal?  @db.Decimal(10, 2)
  car            car       @relation(fields: [plate_id], references: [plate_id], onDelete: Cascade, onUpdate: NoAction, map: "reservation_car_fk")
  users          User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservation_user_fk")

  @@index([plate_id], map: "reservation_car_fk")
  @@index([user_id], map: "reservation_user_fk")
}
