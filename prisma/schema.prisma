generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  reservation   reservation[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model car {
  car_id            String        @id @db.VarChar(20)
  garage_id         Int
  model             String        @db.VarChar(50)
  make              String        @db.VarChar(50)
  year              Int
  price_per_day     Decimal       @db.Decimal(10, 2)
  registration_date DateTime?     @default(now()) @db.DateTime(0)
  status            car_status?   @default(available)
  garage            garage        @relation(fields: [garage_id], references: [garage_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_car_garage")
  reservation       reservation[]
  review            review[]

  @@index([garage_id], map: "fk_car_garage")
}

model reservation {
  reservation_id Int                 @id @default(autoincrement())
  user_id        String
  car_id         String              @db.VarChar(20)
  reserve_date   DateTime?           @default(now()) @db.DateTime(0)
  pickup_date    DateTime            @db.DateTime(0)
  return_date    DateTime            @db.DateTime(0)
  total_price    Decimal             @db.Decimal(10, 2)
  status         reservation_status? @default(pending)
  car            car                 @relation(fields: [car_id], references: [car_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_car")
  users          User                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reservation_user_fk")

  @@index([car_id], map: "fk_reservation_car")
  @@index([user_id], map: "fk_reservation_user")
}

model garage {
  garage_id Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  address   String   @db.VarChar(255)
  city      String   @db.VarChar(50)
  state     String?  @db.VarChar(50)
  country   String   @db.VarChar(50)
  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)
  phone     String?  @db.VarChar(20)
  car       car[]
}

model review {
  review_id Int      @id @default(autoincrement())
  comment   String?  @db.Text
  rating    Decimal? @db.Decimal(2, 1)
  car_id    String?  @db.VarChar(10)
  car       car?     @relation(fields: [car_id], references: [car_id], onDelete: Cascade, onUpdate: NoAction, map: "review_ibfk_1")

  @@index([car_id], map: "car_id")
}

enum reservation_status {
  pending
  confirmed
  cancelled
  completed
}

enum car_status {
  available
  rented
  maintenance
  unavailable
}
